#| echo: false
do_triexp <-(config$Model$AIF$Method=="Fit Individually: Linear Rise, Triexponential Decay")
do_feng <-(config$Model$AIF$Method=="Fit Individually: Feng")
do_fengconv <-(config$Model$AIF$Method=="Fit Individually: FengConv")
do_splines <-(config$Model$AIF$Method=="Fit Individually: Splines")
aif_model_shortname <- case_when(
do_triexp    ~ "triexp",
do_feng      ~ "feng",
do_fengconv  ~ "fengconv",
TRUE         ~ "other"
)
fit_aif <- config$Model$AIF$Method != "Interpolation"
parametric_aif <- any(do_triexp, do_feng, do_fengconv)
nonparam_aif <- do_splines
#| fig-height: 4
#| fig-width: 9
# Extract Data
aif_data <- bidsdata %>%
mutate(aif = map(blooddata, ~bd_extract(.x, output="AIF"))) %>%
mutate(aif = map(aif, ~.x %>%
filter(time >= as.numeric(config$Model$AIF$starttime)*60) %>%
filter(time <= as.numeric(config$Model$AIF$endtime)*60))) %>%
select(pet, aif)
# Fit Model
expdecay_props <- as.numeric(
config$Model$AIF$expdecay_props)
expdecay_props <- ifelse( is.na(expdecay_props),
yes = c(1/60, 0.1),
no = expdecay_props)
inftime <- config$Model$AIF$inftime
if( is.na(inftime)[1] ) {  # Fit inftime completely
aif_data <- aif_data %>%
mutate(aif_fit = map(aif, ~blmod_fengconv(time = .x$time, activity = .x$aif,
Method = .x$Method )))
} else {
aif_data <- aif_data %>%
mutate(aif_fit = map(aif, ~blmod_fengconv(time = .x$time, activity = .x$aif,
Method = .x$Method, inftime = inftime
)))
}
# Make Predictions
mintime <- 0
maxtime <- max(map_dbl(aif_data$aif, ~max(.x$time)))
predtimes <- seq(from=mintime, to=maxtime, length.out=6000)
aif_data <- aif_data %>%
mutate(preds = map(aif_fit, ~tibble(
time = predtimes) %>%
mutate(aif = predict(.x, newdata=list(time=time)))))
# Plot
pmap(list(aif_data$aif, aif_data$preds, aif_data$pet), plot_aif_preds)
# Parameters
aif_data <- aif_data %>%
mutate(aif_pars = map(aif_fit, "par")) %>%
# Conversion
mutate(aif_pars = map(aif_pars, ~.x %>%
mutate(A = A*1000,  # kBq to Bq
B = B*1000,
C = C*1000)))
aif_data
aif_data[,14]
aif_data[14,]
aif_data[14,]$aif_fit
aif_data[14,]$aif_fit[[1]]$par
aif_pars <- aif_data %>%
mutate(aif_pars = map(aif_fit, "par")) %>%
select(pet, aif_pars)
aif_pars %>%
unnest(aif_pars) %>%
kable(digits=3)
aif_pars
kable()
aif_pars %>%
unnest(aif_pars) %>%
dplyr::mutate_if(is.numeric, funs(as.character(signif(., 3))))
?signif
aif_pars %>%
unnest(aif_pars) %>%
dplyr::mutate_if(is.numeric, funs(as.character(signif(., digits = 3))))
aif_pars %>%
unnest(aif_pars) %>%
dplyr::mutate_if(is.numeric, funs(as.character(signif(., digits = 2))))
aif_pars %>%
unnest(aif_pars) %>%
dplyr::mutate_if(is.numeric, funs(as.character(signif(., digits = 3))))
bidsdata <- inner_join(bidsdata, aif_data) %>%
mutate(blooddata = map2(blooddata, aif_fit,
~bd_addfit(.x, fit = .y,
modeltype = "AIF"))) %>%
select(-aif, -preds)
if("aif_fit" %in% colnames(bidsdata)) {
bidsdata <- select(bidsdata, -aif_fit)
}
# Cleaning up the config
if( !do_splines ) {
config$Model$AIF$spline_kb <- NULL
config$Model$AIF$spline_ka_m <- NULL
config$Model$AIF$spline_ka_a <- NULL
}
if( !do_fengconv ) {
config$Model$AIF$inftime <- NULL
}
if( !(any(do_triexp, do_feng, do_fengconv)) ) {
config$Model$AIF$expdecay_props <- NULL
}
if( config$Model$AIF$starttime == 0 ) {
config$Model$AIF$starttime <- NULL
}
if( config$Model$AIF$endtime == Inf ) {
config$Model$AIF$endtime <- NULL
}
config
output_description <- list(
time = list(
Description = "Interpolated time in relation to time zero defined in _pet.json",
Units = "s"
),
whole_blood_radioactivity = list(
Description = "Estimated interpolated radioactivity in whole blood samples",
Units = "Bq"
),
plasma_radioactivity = list(
Description = "Estimated interpolated radioactivity in whole plasma samples",
Units = "Bq"
),
AIF = list(
Description = "Estimated interpolated radioactivity in metabolite-corrected arterial plasma samples",
Units = "Bq"
)
)
# Save interpolated json sidecars
walk(bidsdata$output_json_filename, ~write_json(output_description, path = .x,
pretty=TRUE))
output_description
add_aifpars_to_config
bloodstream:::add_aifpars_to_config
aif_pars <- aif_data %>%
select(pet, aif_parameters = aif_pars)
aif_pars
output_config <- config$Model
add_aifpars_to_config <- function(output_config, aif_parameters) {
output_config$AIF$Fit$Parameters = aif_parameters
output_config$AIF$Fit$Units$time = "s"
output_config$AIF$Fit$Units$AIF = "Bq"
output_config
}
bidsdata <- bidsdata %>%
inner_join(aif_pars, by="pet") %>%
mutate(output_configdata = map(aif_parameters,
~add_aifpars_to_config(output_config, .x)))
bidsdata
bidsdata$aif_pars[[14]]
walk2(bidsdata$output_configdata, bidsdata$output_cfg_filename,
~jsonlite::write_json(.x, path = .y,
pretty=T))
aif_pars <- aif_data %>%
select(pet, aif_parameters = aif_pars)
output_config <- config$Model
add_aifpars_to_config <- function(output_config, aif_parameters) {
output_config$AIF$Fit$Parameters = aif_parameters
output_config$AIF$Fit$Units$time = "s"
output_config$AIF$Fit$Units$AIF = "Bq"
output_config
}
bidsdata <- bidsdata %>%
inner_join(aif_pars, by="pet") %>%
mutate(output_configdata = map(aif_parameters,
~add_aifpars_to_config(output_config, .x)))
aif_pars <- aif_data %>%
select(pet, aif_parameters = aif_pars)
output_config <- config$Model
add_aifpars_to_config <- function(output_config, aif_parameters) {
output_config$AIF$Fit$Parameters = aif_parameters
output_config$AIF$Fit$Units$time = "s"
output_config$AIF$Fit$Units$AIF = "Bq"
output_config
}
bidsdata <- bidsdata %>%
inner_join(aif_pars, by="pet") %>%
mutate(output_configdata = map(aif_parameters,
~add_aifpars_to_config(output_config, .x)))
bidsdata
bidsdata$aif_pars
aif_pars <- aif_data %>%
select(pet, aif_parameters = aif_pars)
output_config <- config$Model
add_aifpars_to_config <- function(output_config, aif_parameters) {
output_config$AIF$Fit$Parameters = aif_parameters
output_config$AIF$Fit$Units$time = "s"
output_config$AIF$Fit$Units$AIF = "Bq"
output_config
}
bidsdata <- bidsdata %>%
inner_join(aif_pars, by="pet") %>%
mutate(output_configdata = map(aif_pars,
~add_aifpars_to_config(output_config, .x)))
walk2(bidsdata$output_configdata, bidsdata$output_cfg_filename,
~jsonlite::write_json(.x, path = .y,
pretty=T))
bidsdata
bidsdata$output_configdata
bidsdata$output_cfg_filename
output_config <- config$Model
walk(bidsdata$output_cfg_filename,
~jsonlite::write_json(output_config, path = .x, pretty=T))
aif_pars <- aif_data %>%
select(pet, aif_parameters = aif_pars)
output_config <- config$Model
add_aifpars_to_config <- function(output_config, aif_parameters) {
output_config$AIF$Fit$Parameters = aif_parameters
output_config$AIF$Fit$Units$time = "s"
output_config$AIF$Fit$Units$AIF = "Bq"
output_config
}
bidsdata <- bidsdata %>%
inner_join(aif_pars, by="pet") %>%
mutate(output_configdata = map(aif_pars,
~add_aifpars_to_config(output_config, .x)))
walk2(bidsdata$output_configdata, bidsdata$output_cfg_filename,
~jsonlite::write_json(.x, path = .y,
pretty=T))
bidsdata <- bidsdata %>%
mutate(bloodfilename = map_chr(filedata, ~.x %>%
filter(measurement == "blood") %>%
filter(str_detect(path, "manual_blood.json")) %>%
slice(1) %>%
pull(path) )) %>%
# Blood tsv file
mutate(output_basename = basename(bloodfilename),
output_basename = str_replace(output_basename,
"_recording-manual_blood.json",
"_inputfunction.tsv"),
output_folder = dirname(bloodfilename),
output_filename = paste0(params$studypath, "/derivatives/bloodstream",
config_suffix, "/",
output_folder, "/", output_basename)) %>%
# Blood json file
mutate(output_json_filename = str_replace(output_filename, "_inputfunction.tsv",
"_inputfunction.json")) %>%
# Blood config file
mutate(output_cfg_filename = str_replace(output_filename, "_inputfunction.tsv",
"_config.json"))
file.remove(bidsdata$output_filename)
file.remove(bidsdata$output_json_filename)
file.remove(bidsdata$output_cfg_filename)
bidsdata <- bidsdata %>%
mutate(input = map(blooddata, bd_create_input)) %>%
mutate(input = map(input, ~rename(.x,
"time" = Time,
"whole_blood_radioactivity" = Blood,
"plasma_radioactivity" = Plasma,
"metabolite_parent_fraction" = ParentFraction,
AIF = AIF))) %>%
#unit_conversion
mutate(input = map(input, ~mutate(.x,
# min to sec
time = time * 60,
# kBq to Bq
whole_blood_radioactivity = unit_convert(whole_blood_radioactivity,
from_units = "kBq",
to_units = "Bq"),
plasma_radioactivity = unit_convert(plasma_radioactivity, "kBq", "Bq"),
AIF = unit_convert(AIF, "kBq", "Bq"))))
walk( dirname(bidsdata$output_filename),
dir.create, recursive=T)
# Save interpolated tsv files
walk2(bidsdata$input,
bidsdata$output_filename, ~write_delim(.x, file=.y,
delim = "\t"))
output_description <- list(
time = list(
Description = "Interpolated time in relation to time zero defined in _pet.json",
Units = "s"
),
whole_blood_radioactivity = list(
Description = "Estimated interpolated radioactivity in whole blood samples",
Units = "Bq"
),
plasma_radioactivity = list(
Description = "Estimated interpolated radioactivity in whole plasma samples",
Units = "Bq"
),
AIF = list(
Description = "Estimated interpolated radioactivity in metabolite-corrected arterial plasma samples",
Units = "Bq"
)
)
# Save interpolated json sidecars
walk(bidsdata$output_json_filename, ~write_json(output_description, path = .x,
pretty=TRUE))
#| results: asis
#| echo: false
str_glue("Because we used a parametric model for the AIF, we will first add the AIF parameters to the output. These parameters are refer to Bq/mL and seconds.")
aif_pars <- aif_data %>%
select(pet, aif_parameters = aif_pars)
output_config <- config$Model
add_aifpars_to_config <- function(output_config, aif_parameters) {
output_config$AIF$Fit$Parameters = aif_parameters
output_config$AIF$Fit$Units$time = "s"
output_config$AIF$Fit$Units$AIF = "Bq"
output_config
}
bidsdata <- bidsdata %>%
inner_join(aif_pars, by="pet") %>%
mutate(output_configdata = map(aif_pars,
~add_aifpars_to_config(output_config, .x)))
walk2(bidsdata$output_configdata, bidsdata$output_cfg_filename,
~jsonlite::write_json(.x, path = .y,
pretty=T))
bidsdata$aif_parameters[[14]]
bidsdata
bidsdata$aif_parameters.y.y
bidsdata <- bidsdata %>%
inner_join(aif_pars, by="pet") %>%
mutate(output_configdata = map(aif_parameters,
~add_aifpars_to_config(output_config, .x)))
bidsdata
bidsdata$aif_parameters
walk2(bidsdata$output_configdata, bidsdata$output_cfg_filename,
~jsonlite::write_json(.x, path = .y,
pretty=T))
bidsdata$output_cfg_filename
bidsdata$aif_parameters
bidsdata$aif_parameters[[7]]
debug(add_aifpars_to_config)
bidsdata <- bidsdata %>%
inner_join(aif_pars, by="pet") %>%
mutate(output_configdata = map(aif_parameters,
~add_aifpars_to_config(output_config, .x)))
bidsdata
bidsdata$aif_parameters
bidsdata <- bidsdata %>% select(-starts_with("aif_parameters"))
bidsdata
bidsdata <- bidsdata %>%
inner_join(aif_pars, by="pet") %>%
mutate(output_configdata = map(aif_parameters,
~add_aifpars_to_config(output_config, .x)))
aif_parameters
aif_parameters
View(aif_parameters)
aif_parameters %>% mutate_if(is.numeric, ~signif(., 6))
k <- aif_parameters %>% mutate_if(is.numeric, ~signif(., 6))
View(k)
k <- aif_parameters %>% mutate_if(is.numeric, ~as.character(signif(., 6)))
View(k)
aif_parameters
View(aif_parameters)
k <- aif_parameters %>% mutate_if(is.numeric, ~as.character(signif(., 6)))
View(k)
aif_pars <- aif_data %>%
select(pet, aif_parameters = aif_pars)
output_config <- config$Model
add_aifpars_to_config <- function(output_config, aif_parameters) {
# JSON files can round low values to zero
aif_parameters <- aif_parameters %>%
mutate_if(is.numeric, ~as.character(signif(., 6)))
output_config$AIF$Fit$Parameters = aif_parameters
output_config$AIF$Fit$Units$time = "s"
output_config$AIF$Fit$Units$AIF = "Bq"
output_config
}
bidsdata <- bidsdata %>%
inner_join(aif_pars, by="pet") %>%
mutate(output_configdata = map(aif_parameters,
~add_aifpars_to_config(output_config, .x)))
walk2(bidsdata$output_configdata, bidsdata$output_cfg_filename,
~jsonlite::write_json(.x, path = .y,
pretty=T))
add_aifpars_to_config <- function(output_config, aif_parameters) {
# JSON files can round low values to zero
aif_parameters <- aif_parameters %>%
mutate_if(is.numeric, ~as.character(signif(., 6)))
output_config$AIF$Fit$Parameters = aif_parameters
output_config$AIF$Fit$Units$time = "s"
output_config$AIF$Fit$Units$AIF = "Bq"
output_config
}
aif_pars <- aif_data %>%
select(pet, aif_parameters = aif_pars)
output_config <- config$Model
add_aifpars_to_config <- function(output_config, aif_parameters) {
# JSON files can round low values to zero
aif_parameters <- aif_parameters %>%
mutate_if(is.numeric, ~as.character(signif(., 6)))
output_config$AIF$Fit$Parameters = aif_parameters
output_config$AIF$Fit$Units$time = "s"
output_config$AIF$Fit$Units$AIF = "Bq"
output_config
}
bidsdata <- bidsdata %>%
inner_join(aif_pars, by="pet") %>%
mutate(output_configdata = map(aif_parameters,
~add_aifpars_to_config(output_config, .x)))
bidsdata <- bidsdata %>% select(-aif_parameters)
aif_pars <- aif_data %>%
select(pet, aif_parameters = aif_pars)
output_config <- config$Model
add_aifpars_to_config <- function(output_config, aif_parameters) {
# JSON files can round low values to zero
aif_parameters <- aif_parameters %>%
mutate_if(is.numeric, ~as.character(signif(., 6)))
output_config$AIF$Fit$Parameters = aif_parameters
output_config$AIF$Fit$Units$time = "s"
output_config$AIF$Fit$Units$AIF = "Bq"
output_config
}
bidsdata <- bidsdata %>%
inner_join(aif_pars, by="pet") %>%
mutate(output_configdata = map(aif_parameters,
~add_aifpars_to_config(output_config, .x)))
walk2(bidsdata$output_configdata, bidsdata$output_cfg_filename,
~jsonlite::write_json(.x, path = .y,
pretty=T))
devtools::install()
library(bloodstream)
bloodstream(studypath = "../SiMBA_Applications/MC1/RawData/ds004869/", configpath = "../SiMBA_Applications/MC1/RawData/ds004869/code/config_2024-07-01_id-uoSe.json")
devtools::install()
bloodstream(studypath = "../SiMBA_Applications/MC1/RawData/ds004869/", configpath = "../SiMBA_Applications/MC1/RawData/ds004869/code/config_2024-07-01_id-uoSe.json")
library(bloodstream)
bloodstream(studypath = "../SiMBA_Applications/MC1/RawData/ds004869/", configpath = "../SiMBA_Applications/MC1/RawData/ds004869/code/config_2024-07-01_id-uoSe.json")
mutate_if
?mutate_if
data(mtcars)
mtcars
mtcars %>% mutate(across(where(is.numeric), ~as.character(signif(.x, digits = 3))))
devtools::install()
bloodstream(studypath = "../SiMBA_Applications/MC1/RawData/ds004869/", configpath = "../SiMBA_Applications/MC1/RawData/ds004869/code/config_2024-07-01_id-uoSe.json")
library(bloodstream)
bloodstream(studypath = "../SiMBA_Applications/MC1/RawData/ds004869/", configpath = "../SiMBA_Applications/MC1/RawData/ds004869/code/config_2024-07-01_id-uoSe.json")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(tidyverse)
library(tidyverse)
library(jsonlite)
library(cowplot)
library(stringr)
library(knitr)
library(mgcv)
library(mgcv)
library(gratia)
library(glue)
library(kinfitr)
library(bloodstream)
studypath <- "/home/granville/Repositories/OpenNeuro/KaSP_UCBJ/"
configpath <- "/home/granville/Repositories/OpenNeuro/KaSP_UCBJ/code/config_2025-01-15_id-gN74.json"
configname <- basename(configpath)
config_suffix <- str_match(configname, "^config_?-?(.*)\\.json")[,2]
config <- jsonlite::fromJSON(configpath)
config_subset <- parse_config_subsets(config)
theme_set(theme_light())
str(config$Model)
#| echo: false
subsetting <- (ncol(config_subset) > 0)
no_subsetting <- !subsetting
subsetting
bidsdata <- bids_parse_study(params$studypath)
studypath
library(kinfitr)
bids_parse_study("studypath")
studypath
bids_parse_files(studypath = "studypath")
bids_parse_files(studypath = studypath)
bids_parse_study(studypath = studypath)
abc <- .Last.value
abc
plot(abc$blooddata[[1]])
plot(abc$blooddata[[2]])
plot(abc$blooddata[[3]])
plot(abc$blooddata[[4]])
kinfitr:::bids_parse_petinfo
abc <- tibble(a = c(1,1,1,1,1,2,2,2,2))
abc <- tibble::tibble(a = c(1,1,1,1,1,2,2,2,2), b = c(1:5, 1:5))
abc <- tibble::tibble(a = c(1,1,1,1,1,2,2,2,2,2), b = c(1:5, 1:5))
abc
library(tidyverse)
abc %>% mutate(b = ifelse(a==1 & b==2), yes=10000, no=b)
abc %>% mutate(b = ifelse((a==1 & b==2), yes=10000, no=b)
abc %>% mutate(b = ifelse((a==1 & b==2), yes=10000, no=b))
abc %>% mutate(b = ifelse((a==1 & b>2), yes=10000, no=b))
studypath <- "../OpenNeuro/ds004869/"
bidsdata <- bids_parse_study(studypath)
devtools::load_all()
bidsdata <- bids_parse_study(studypath)
library(kinfitr)
bidsdata <- bids_parse_study(studypath)
bidsdata
bidsdata <- bids_parse_study(studypath)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
extra_pet_details <- map(bidsdata$petinfo,
get_filterable_attributes) %>%
bind_rows()
bidsdata <- bind_cols(extra_pet_details, bidsdata) %>%
all_identifiers_to_character()
bidsdata
bidsdata$pet <- attributes_to_title(bidsdata)
bidsdata$fulltitle <- attributes_to_title(bidsdata, all_attributes = T)
fulltitle
bidsdata
# Extract Data
pf_data <- bidsdata %>%
mutate(pf = map(blooddata, ~bd_extract(.x, output="parentFraction"))) %>%
mutate(pf = map(pf, ~.x %>%
filter(time >= as.numeric(config$Model$ParentFraction$starttime)*60) %>%
filter(time <= as.numeric(config$Model$ParentFraction$endtime)*60))) %>%
select(pet, pf)
bidsdata
pf_data <- bidsdata %>%
mutate(pf = map(blooddata, ~bd_extract(.x, output="parentFraction"))) %>%
select(pet, pf)
logit(0.999)
car::logit(0.999)
ar::logit(0.99)
car::logit(0.99)
car::logit(0.98)
