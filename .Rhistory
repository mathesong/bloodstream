p <- kinfitr::blmod_feng_model(t, )
kk <- aif_data$aif_pars[[1]]
p <- kinfitr::blmod_feng_model(t,kk$t0, kk$A, kk$alpha, kk$B, kk$beta, kk$C, kk$gamma)
plot(t, p)
t <- seq(0, 120, length.out=6000)
p <- kinfitr::blmod_feng_model(t,kk$t0, kk$A, kk$alpha, kk$B, kk$beta, kk$C, kk$gamma)
plot(t, p)
kk <- aif_data$aif_fit[[1]]$par
p <- kinfitr::blmod_feng_model(t,kk$t0, kk$A, kk$alpha, kk$B, kk$beta, kk$C, kk$gamma)
plot(t, p)
p <- kinfitr::blmod_feng_model(t*60,kk$t0, kk$A, kk$alpha, kk$B, kk$beta, kk$C, kk$gamma)
plot(t, p)
p2 <- kinfitr::blmod_feng_model(t,kk$t0/60, kk$A, kk$alpha*60, kk$B, kk$beta*60, kk$C, kk$gamma*60)
plot(t, p2)
p2 <- kinfitr::blmod_feng_model(t,kk$t0/60, kk$A, kk$alpha/60, kk$B, kk$beta/60, kk$C, kk$gamma/60)
plot(t, p2)
p2 <- kinfitr::blmod_feng_model(t,kk$t0/60, kk$A/60, kk$alpha/60, kk$B, kk$beta/60, kk$C, kk$gamma/60)
plot(t, p2)
p2 <- kinfitr::blmod_feng_model(t,kk$t0/60, kk$A*60, kk$alpha/60, kk$B, kk$beta/60, kk$C, kk$gamma/60)
plot(t, p2)
dat <- aif_data$aif[[1]]
fit1 <- blmod_feng(dat$time, dat$aif, Method = dat$Method)
fit2 <- blmod_feng(dat$time/60, dat$aif, Method = dat$Method)
fit1$par
fit2$par
fit1$par / fit2$par
1/60
fit2$par / fit1$par
fit2$par
fit1$par
aif_data <- aif_data %>%
mutate(aif_pars = map(aif_fit, "par")) %>%
# Conversion
mutate(aif_pars = map(aif_pars, ~.x %>%
mutate(A = A*1000*60,  # kBq to Bq
B = B*1000,
C = C*1000,
alpha = alpha*60,  # s to min
beta = beta*60,
gamma = gamma*60,
t0 = t0/60)))
kk <- aif_data$aif_pars[[1]]
p2 <- kinfitr::blmod_feng_model(t,kk$t0, kk$A, kk$alpha, kk$B, kk$beta, kk$C, kk$gamma)
plot(t, p2)
?blmod_fengconv
data(pbr28)
blooddata <- pbr28$blooddata[[1]]
blooddata <- bd_blood_dispcor(blooddata)
aif <- bd_extract(blooddata, output = "AIF")
blood_fit <- blmod_fengconv(aif$time,
aif$aif,
Method = aif$Method,
multstart_iter = 1,
inftime = 22)
blood_fit
blood_fit$par
aifdata
aif_data
aif_pars <- aif_data %>%
select(pet, aif_pars) %>%
unnest(aif_pars)
aif_pars
config$Model$AIF$Method
config$Model$AIF$Method="Fit Individually: Linear Rise, Triexponential Decay"
config$Model$AIF$Method
aif_pars <- aif_data %>%
mutate(Model = str_match(config$Model$AIF$Method, ".*:(.*)")[,2])
aif_pars
aif_model = str_match(config$Model$AIF$Method, ".*:(.*)")[,2]
aif_model
aif_pars <- aif_data %>%
select(pet, aif_pars) %>%
unnest(aif_pars)
aif_model = str_match(config$Model$AIF$Method, ".*:(.*)")[,2]
aif_model
aif_model_shortname <- case_when(
do_triexp    ~ "triexp",
do_feng      ~ "feng",
do_fengconv  ~ "fengconv",
TRUE         ~ "other"
)
aif_model_shortname
do_triexp <-(config$Model$AIF$Method=="Fit Individually: Linear Rise, Triexponential Decay")
do_feng <-(config$Model$AIF$Method=="Fit Individually: Feng")
do_fengconv <-(config$Model$AIF$Method=="Fit Individually: FengConv")
do_splines <-(config$Model$AIF$Method=="Fit Individually: Splines")
aif_model_shortname <- case_when(
do_triexp    ~ "triexp",
do_feng      ~ "feng",
do_fengconv  ~ "fengconv",
TRUE         ~ "other"
)
aif_model_shortname
aif_pars <- aif_data %>%
select(pet, aif_pars) %>%
unnest(aif_pars)
bidsdata <- bidsdata %>%
left_join(aif_data %>% select(pet, aif_pars))
aif_pars
output_config
bidsdata <- bidsdata %>%
mutate(bloodfilename = map_chr(filedata, ~.x %>%
filter(measurement == "blood") %>%
filter(str_detect(path, "manual_blood.json")) %>%
slice(1) %>%
pull(path) )) %>%
# Create filenames
mutate(output_basename = basename(bloodfilename),
output_basename = str_replace(output_basename,
"_recording-manual_blood.json",
"_inputfunction.tsv"),
output_folder = dirname(bloodfilename),
output_filename = paste0(params$studypath, "/derivatives/bloodstream/",
output_folder, "/", output_basename)) %>%
mutate(cfg_output_filename = str_replace(output_filename, "_inputfunction.tsv",
"_config.json"))
# Save config files
output_config <- config$Model
output_config
config
confi
config
configpath
devtools::load_all()
bloodstream("../ds004230/", configpath = "../ds004230/config_2022-09-23_id-rhpVB.json")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(tidyverse)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(jsonlite)
library(cowplot)
library(mgcv)
library(gratia)
library(kinfitr)
library(bloodstream)
configpath <- "../ds004230/config_2022-09-23_id-rhpVB.json"
config <- jsonlite::fromJSON(configpath)
config_subset <- parse_config_subsets(config)
theme_set(theme_light())
#| echo: false
subsetting <- (nrow(config_subset) > 0)
no_subsetting <- !subsetting
# Subsetting
### Extract measurement information
measurements <- bids_parse_files(params$studypath) %>%
mutate(petinfo = map(filedata,
kinfitr:::bids_parse_petinfo))
extra_pet_details <- map(measurements$petinfo,
get_filterable_attributes) %>%
bind_rows()
measurements <- bind_cols(extra_pet_details, measurements) %>%
all_identifiers_to_character()
### Filter
measurements <- measurements %>%
inner_join(config_subset,
by = colnames(config_subset))
### Continue to process
bidsdata <- measurements
bidsdata$blooddata <- purrr::map(bidsdata$filedata,
bids_create_blooddata)
bidsdata$tactimes <- purrr::map(bidsdata$filedata,
kinfitr:::bids_parse_pettimes)
bidsdata <- dplyr::filter(bidsdata, !is.na(tactimes))
bidsdata$pet <- attributes_to_title(bidsdata)
bidsdata$fulltitle <- attributes_to_title(bidsdata, all_attributes = T)
kable(config_subset)
library(knitr)
kable(config_subset)
#| echo: false
bidsdata_attributes <- bidsdata %>%
select(1:(which(colnames(bidsdata)=="filedata")-1), pet)
kable(bidsdata_attributes)
#| warning: false
#| message: false
#| fig-height: 4
#| fig-width: 8
map2(bidsdata$blooddata, bidsdata$pet,
plot_blooddata_extra)
bidsdata
bidsdata$blooddata
bidsdata$B[[1]]
bidsdata$blooddata[[1]]
bidsdata$blooddata[[2]]
bidsdata$blooddata[[3]]
BIDSDATA
bidsdata
bidsdata$pet
as.list(bidsdata$blooddata)
length(bidsdata$blooddata)
bidsdata$pet
plot_blooddata_extra
plot_blooddata_extra(bidsdata$blooddata[[1]], bidsdata$pet[1])
debug(plot_blooddata_extra)
plot_blooddata_extra(bidsdata$blooddata[[1]], bidsdata$pet[1])
orig_time <- kinfitr::plot_blooddata(blooddata) + ggplot2::labs(x = "Time (min)")
orig_time <- kinfitr::plot_blooddata(blooddata) + ggplot2::labs(x = "Time (min)")
blooddata
View(bidsdata)
"../../../ds004230/"
### Extract measurement information
measurements <- bids_parse_files(params$studypath) %>%
mutate(petinfo = map(filedata,
kinfitr:::bids_parse_petinfo))
measurements$ses
measurements
extra_pet_details <- map(measurements$petinfo,
get_filterable_attributes) %>%
bind_rows()
measurements <- bind_cols(extra_pet_details, measurements) %>%
all_identifiers_to_character()
measurements
measurements$petinfo[[1]]
### Filter
measurements <- measurements %>%
inner_join(config_subset,
by = colnames(config_subset))
measurements
### Continue to process
bidsdata <- measurements
bidsdata$blooddata <- purrr::map(bidsdata$filedata,
bids_create_blooddata)
bidsdata$blooddata[[1]]
plot(bidsdata$blooddata[[1]])
bidsdata
bidsdata$filedata[[1]]
bidsdata$filedata[[1]]$path_absolute
bidsdata$filedata[[1]]$path
setwd("C:/Users/mathe/Repositories/bloodstream/inst/extdata")
list.files("../../../ds004230/sub-PS19/ses-baselinebrain/pet/")
### Extract measurement information
measurements <- bids_parse_files(params$studypath) %>%
mutate(petinfo = map(filedata,
kinfitr:::bids_parse_petinfo))
measurements
measurements$filedata[[5]]
devtools::load
devtools::load_all()
configpath <- "../config_2022-09-23_id-rhpVB.json"
studypath <- "../ds004230/"
devtools::install()
library(bloodstream)
bloodstream(studypath = "../ds004230/", configpath = "../config_2022-09-23_id-rhpVB.json")
1536 / 768
devtools::install()
devtools::install()
bloodstream(studypath = "../ds004230/", configpath = "../config_2022-09-23_id-rhpVB.json")
devtools::install()
library(bloodstream)
bloodstream(studypath = "../ds004230/", configpath = "../config_2022-09-23_id-rhpVB.json")
usethis::use_r("qc")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
#| output: false
library(tidyverse)
library(jsonlite)
library(cowplot)
library(stringr)
library(knitr)
library(mgcv)
library(gratia)
library(kinfitr)
library(bloodstream)
config <- jsonlite::fromJSON(params$configpath)
studypath <- "../ds004230/"
configpath <- "../config_2022-09-23_id-rhpVB.json"
library(tidyverse)
library(jsonlite)
library(cowplot)
library(stringr)
library(mgcv)
library(gratia)
library(kinfitr)
config <- jsonlite::fromJSON(configpath)
config_subset <- parse_config_subsets(config)
theme_set(theme_light())
#| echo: false
subsetting <- (nrow(config_subset) > 0)
no_subsetting <- !subsetting
subsetting
# Subsetting
### Extract measurement information
measurements <- bids_parse_files(params$studypath) %>%
mutate(petinfo = map(filedata,
kinfitr:::bids_parse_petinfo))
extra_pet_details <- map(measurements$petinfo,
get_filterable_attributes) %>%
bind_rows()
measurements <- bind_cols(extra_pet_details, measurements) %>%
all_identifiers_to_character()
### Filter
measurements <- measurements %>%
inner_join(config_subset,
by = colnames(config_subset))
### Continue to process
bidsdata <- measurements
bidsdata$blooddata <- purrr::map(bidsdata$filedata,
bids_create_blooddata)
bidsdata$tactimes <- purrr::map(bidsdata$filedata,
kinfitr:::bids_parse_pettimes)
bidsdata <- dplyr::filter(bidsdata, !is.na(tactimes))
bidsdata$pet <- attributes_to_title(bidsdata)
bidsdata$fulltitle <- attributes_to_title(bidsdata, all_attributes = T)
blooddata <- bidsdata$blooddata[[1]]
title <- bidsdata$pet[1]
pf <- bd_extract(blooddata, "parentFraction")
pf
dup_times <- sum(duplicated(pf$time))
dup_times
over_1 <- sum(pf$parentFraction > 1))
over_1 <- sum(pf$parentFraction > 1)
over_1
below_0 <- sum(pf$parentFraction < 0)
below_0
warnings <- c("")
max(pf$parentfraction)
max_pf <- max(pf$parentFraction)
max_pf
min_pf <- min(pf$parentFraction)
devtools::load_all()
map2_chr(bidsdata$blooddata, bidsdata$pet)
map2_chr(bidsdata$blooddata, bidsdata$pet, qc_parentFraction)
str_glue(map2_chr(bidsdata$blooddata, bidsdata$pet, qc_parentFraction))'
str_glue(map2_chr(bidsdata$blooddata, bidsdata$pet, qc_parentFraction))'
str_glue(map2_chr(bidsdata$blooddata, bidsdata$pet, qc_parentFraction))
map2_chr(bidsdata$blooddata, bidsdata$pet, qc_parentFraction)
str_glue(map2_chr(bidsdata$blooddata, bidsdata$pet, qc_parentFraction))
pf_warnings <- map2_chr(bidsdata$blooddata, bidsdata$pet, qc_parentFraction)
devtools::load_all()
pf_warnings <- map2_chr(bidsdata$blooddata, bidsdata$pet, qc_parentFraction)
pf_warnings
pf_warnings <- pf_warnings[!is.na(pf_warnings)]
pf_warnings
#| results: asis
pf_warnings <- map2_chr(bidsdata$blooddata, bidsdata$pet, qc_parentFraction)
pf_warnings <- pf_warnings[!is.na(pf_warnings)]
if(length(pf_warnings) > 0) {
str_glue(map2_chr(bidsdata$blooddata, bidsdata$pet, qc_parentFraction))
}
#| results: asis
pf_warnings <- map2_chr(bidsdata$blooddata, bidsdata$pet, qc_parentFraction)
pf_warnings <- pf_warnings[!is.na(pf_warnings)]
if(length(pf_warnings) > 0) {
str_glue(map2_chr(bidsdata$blooddata, bidsdata$pet, qc_parentFraction))
} else {
str_glue("No detected issues.")
}
bpr <- bd_extract(blooddata, "BPR")
dup_times <- sum(duplicated(bpr$time))
over_1 <- sum(bpr$bpr > 1)
wb <- bd_extract(blooddata, "blood")
wb <- bd_extract(blooddata, "Blood")
wb <- bd_extract(blooddata, "Blood")
dup_times <- sum(duplicated(wb$time))
below_0 <- sum(wb$wb < 0)
wb <- bd_extract(blooddata, "Blood")
dup_times <- sum(duplicated(wb$time))
dup_times
below_0
min_wb <- round(min(wb$activity),2)
min_wb
dup_times <- sum(duplicated(wb$time))
dup_times
max_wb <- round(max(wb$activity),2)
max_wb
lowest_peak <- min_wb / max_wb
lowest_peak
lowest_peak
lowest_peak_perc <- 100*lowest_peak
lowest_peak_perc
mean_bpr <- mean(bpr$bpr)
mean_bpr
y <- c(1,1,1,1)
y==1
all(y==1)
#| results: asis
bpr_warnings <- map2_chr(bidsdata$blooddata, bidsdata$pet, qc_parentFraction)
bpr_warnings <- bpr_warnings[!is.na(bpr_warnings)]
if(length(bpr_warnings) > 0) {
str_glue(map2_chr(bidsdata$blooddata, bidsdata$pet, qc_bpr))
} else {
str_glue("No detected issues.")
}
#| results: asis
wb_warnings <- map2_chr(bidsdata$blooddata, bidsdata$pet, qc_parentFraction)
wb_warnings <- wb_warnings[!is.na(wb_warnings)]
if(length(wb_warnings) > 0) {
str_glue(map2_chr(bidsdata$blooddata, bidsdata$pet, qc_wb))
} else {
str_glue("No detected issues.")
}
blooddata
title
qc_wb(blooddata, "test")
devtools::load_all()
devtools::load_all()
qc_wb(blooddata, "test")
#| results: asis
wb_warnings <- map2_chr(bidsdata$blooddata, bidsdata$pet, qc_parentFraction)
wb_warnings <- wb_warnings[!is.na(wb_warnings)]
if(length(wb_warnings) > 0) {
str_glue(map2_chr(bidsdata$blooddata, bidsdata$pet, qc_wb))
} else {
str_glue("No detected issues.")
}
#| results: asis
pf_warnings <- map2_chr(bidsdata$blooddata, bidsdata$pet, qc_parentFraction)
pf_warnings <- pf_warnings[!is.na(pf_warnings)]
if(length(pf_warnings) > 0) {
str_glue(pf_warnings)
} else {
str_glue("No detected issues.")
}
#| results: asis
bpr_warnings <- map2_chr(bidsdata$blooddata, bidsdata$pet, qc_bpr)
bpr_warnings <- bpr_warnings[!is.na(bpr_warnings)]
if(length(bpr_warnings) > 0) {
str_glue(bpr_warnings)
} else {
str_glue("No detected issues.")
}
#| results: asis
wb_warnings <- map2_chr(bidsdata$blooddata, bidsdata$pet, qc_wb)
wb_warnings <- wb_warnings[!is.na(wb_warnings)]
if(length(wb_warnings) > 0) {
str_glue(wb_warnings)
} else {
str_glue("No detected issues.")
}
wb_warnings
wb_warnings <- wb_warnings[!is.na(wb_warnings)]
wb_warnings
length(wb_warnings) > 0
str_glue(wb_warnings)
glue::glue_collapse(wb_warnings)
glue_collapse("No detected issues.")
library(glue)
#| results: asis
pf_warnings <- map2_chr(bidsdata$blooddata, bidsdata$pet, qc_parentFraction)
pf_warnings <- pf_warnings[!is.na(pf_warnings)]
if(length(pf_warnings) > 0) {
glue_collapse(pf_warnings)
} else {
str_glue("No detected issues.")
}
#| results: asis
pf_warnings <- map2_chr(bidsdata$blooddata, bidsdata$pet, qc_parentFraction)
pf_warnings <- pf_warnings[!is.na(pf_warnings)]
if(length(pf_warnings) > 0) {
glue_collapse(pf_warnings)
} else {
glue_collapse("No detected issues.")
}
#| results: asis
bpr_warnings <- map2_chr(bidsdata$blooddata, bidsdata$pet, qc_bpr)
bpr_warnings <- bpr_warnings[!is.na(bpr_warnings)]
if(length(bpr_warnings) > 0) {
glue_collapse(bpr_warnings)
} else {
glue_collapse("No detected issues.")
}
#| results: asis
wb_warnings <- map2_chr(bidsdata$blooddata, bidsdata$pet, qc_wb)
wb_warnings <- wb_warnings[!is.na(wb_warnings)]
if(length(wb_warnings) > 0) {
glue_collapse(wb_warnings)
} else {
glue_collapse("No detected issues.")
}
devtools::install()
bloodstream(studypath = "../ds004230/", configpath = "../config_2022-09-23_id-rhpVB.json")
devtools::install()
library(bloodstream)
bloodstream(studypath = "../ds004230/", configpath = "../config_2022-09-23_id-rhpVB.json")
devtools::install()
library(bloodstream)
bloodstream(studypath = "../ds004230/", configpath = "../config_2022-09-23_id-rhpVB.json")
devtools::install()
library(bloodstream)
bloodstream(studypath = "../ds004230/", configpath = "../config_2022-09-23_id-rhpVB.json")
?quarto_render
dir.create(paste0(studypath, "/derivatives/bloodstream"))
devtools::install()
library(bloodstream)
library(bloodstream)
bloodstream(studypath = "../ds004230/", configpath = "../config_2022-09-23_id-rhpVB.json")
devtools::load_all()
bloodstream(studypath = "../ds004230/", configpath = "../config_2022-09-23_id-rhpVB.json")
devtools::load_all()
bloodstream(studypath = "../ds004230/", configpath = "../config_2022-09-23_id-rhpVB.json")
devtools::install()
library(bloodstream)
bloodstream(studypath = "../ds004230/", configpath = "../config_2022-09-23_id-rhpVB.json")
devtools::install()
library(bloodstream)
bloodstream(studypath = "../ds004230/", configpath = "../config_2022-09-23_id-rhpVB.json")
devtools::install()
library(kinfitr)
?ma1
data(pbr28)
t_tac <- pbr28$tacs[[2]]$Times / 60
tac <- pbr28$tacs[[2]]$FC
weights <- pbr28$tacs[[2]]$Weights
dur <- pbr28$tacs[[2]]$Duration/60
input <- blood_interp(
pbr28$procblood[[2]]$Time / 60, pbr28$procblood[[2]]$Cbl_dispcorr,
pbr28$procblood[[2]]$Time / 60, pbr28$procblood[[2]]$Cpl_metabcorr,
t_parentfrac = 1, parentfrac = 1
)
fit1 <- ma1(t_tac, tac, input, 10, weights)
input <- blood_interp(
pbr28$procblood[[2]]$Time / 60, pbr28$procblood[[2]]$Cbl_dispcorr,
pbr28$procblood[[2]]$Time / 60, pbr28$procblood[[2]]$Cpl_metabcorr,
t_parentfrac = 1, parentfrac = 1
)
